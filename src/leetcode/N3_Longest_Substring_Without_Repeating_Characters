class N3_Longest_Substring_Without_Repeating_Characters {
    public int lengthOfLongestSubstring(String s) {
        int result = 0;
        int slen = s.length();

        for(int i = 0; i < slen; i++) {
            if (slen - i <= result) break;
            Set<Character> charSet = new HashSet<>();
            charSet.add(s.charAt(i));
            for (int j = i+1; j < slen; j++) {
                char now = s.charAt(j);
                if(charSet.contains(now)) {
                    break;
                } else {
                    charSet.add(now);
                }
            }
            result = charSet.size() > result ? charSet.size() : result;

        }

        return result;
    }

    public int lengthOfLongestSubstring2(String s) {
        int left = 0;
        int right = 0;
        int result = 0;
        Map<Character, Integer> map = new HashMap<>();
        while (right < s.length()) {
            if(map.containsKey(s.charAt(right))) {
                left = Math.max(map.get(s.charAt(right)) + 1, left);
            }

            map.put(s.charAt(right), right);
            result = Math.max(result, right - left + 1);
            right++;
        }

        return result;
    }
}